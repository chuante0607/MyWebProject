@model IEnumerable<UCOMProject.Models.EmployeeViewModel>
@using UCOMProject.Methods
@{
    ViewBag.Title = "帳號權限設定";
    int rank = SessionEmp.CurrentEmp.JobRank;
}

<div id="app" v-cloak>
    <h1 class="text-center">帳號權限設定</h1>
    <div class="container" style="position:relative">
        <div class="row viewSelect">
            <select v-model="selectBranchId" multiple class="col">
                <option v-for="b in branches"
                        :key="b.branchId"
                        :value="b.branchId">
                    {{b.branch}}
                </option>
            </select>
            <div class="col">
                <div class="row">
                    <div class="col selectItem selectA">
                        <p>檢視人數</p>
                        <span>{{showEmps.length}}人</span>
                    </div>
                    <div class="col selectItem selectB">
                        <p>總人數</p>
                        <span>{{source.length}}人</span>
                    </div>
                </div>
                <div class="row viewSelect">
                    <div class="col selectItem ">
                        <p>檢視單位</p>
                        <span :class="'badge ' + b.color" v-for="(b , index) in selectBranch" :key="index">
                            {{b.branch}}
                        </span>
                    </div>
                </div>
            </div>
        </div>
        <button class="btn btn-sm btn-danger saveBtn" v-on:click="handleSave" v-show="editEmps.length">Save</button>
    </div>



    <div class="row mt-5" style="margin:0px;">
        <div class="col-12 col-xl-6 block" v-for="(data , index) in showEmps" :key="data.eid">
            <div class="col-2">
                <a :title="data.name" :href="'@Url.Action("detail")?eid=' + data.eId">
                    <img :src="'/img/' + data.image" :class="'img-fluid headImg ' + imgBorderColor[data.jobRank]" :alt="data.eid" v-if="data.allow" />
                    <img :src="'/img/' + data.image" class="img-fluid headImg closeBorderColor" :alt="data.eid" v-else />
                </a>
            </div>
            <div class="col-10">
                <div class="item">
                    <div class="row">
                        <div class="col-4">
                            <span class="badge name">{{data.branch}}</span>
                            <span :class="'badge ' + rankColor[data.jobRank]">{{data.jobTitle}}</span>
                        </div>
                        <div class="col-5">
                            <span class="badge name">{{data.eId}}&nbsp;{{data.name}}</span>
                        </div>
                        <div class="col-3">
                            <span class="badge">帳號狀態:</span>
                            <span class="badge badge-success" v-on:click="handleAllow(data)" v-if="data.allow">正常</span>
                            <span class="badge badge-secondary" v-on:click="handleAllow(data)" v-else>未開通</span>
                        </div>
                    </div>
                    <hr style="margin-top:3px;" />
                    <input type="checkbox"
                           name="name"
                           value=""
                           :id="'manage' + data.eId"
                           v-model="data.manageChecked"
                           v-on:change="handleManage(data)"
                           v-bind:disabled="!data.allow" />
                    <label :for="'manage' + data.eId">主管權限</label>
                    @if (SessionEmp.CurrentEmp.JobRank == 0)
                    {
                        <input type="checkbox"
                               name="name"
                               value=""
                               :id="'admin' + data.eId"
                               v-model="data.adminChecked"
                               v-on:change="handleAdmin(data)"
                               v-bind:disabled="!data.allow" />
                        <label :for="'admin' + data.eId">管理員權限</label>
                    }
                </div>
            </div>
        </div>
    </div>
</div>


@section Script{
    @*<script src="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/js/bootstrap4-toggle.min.js"></script>*@
    <script src="~/Content/Multi-Column-Select/Multi-Column-Select.js"></script>
    <script>

    $(() => {
        const years = [2016, 2017, 2016, 2019, 2019, 2018, 2016];
        const distinctYears = [...new Set(years)];


    })
        const vm = new Vue({
            el: '#app',
            data: {
                source:@Html.Raw(ViewBag.Source),
                currentUser: {},
                branches: [],//可選的部門名單
                selectBranchId: [0],//select v-model value
                selectBranch: [],//select 的部門名稱
                color: color,
                rankColor: ['badge-danger', 'badge-success', 'badge-primary'],
                imgBorderColor: ['adminBorderColor', 'userBorderColor', 'managerBorderColor'],
                editEmps:[],
            },
            mounted() {
                this.initial();
            },
            computed: {
                //重新渲染員工清單
                showEmps() {
                    if (this.selectBranchId.some(id => id === 0))
                        return this.source;

                    return this.source.filter(item => {
                        //員工屬於所選部門就列入 , 以branchId作為比對條件
                        return this.selectBranchId.some(id => id === item.branchId)
                    })
                }
            },
            methods: {
                //data初始化
                initial() {
                    //setting branches
                    this.branches.push({ branchId: 0, branch: '全部' })
                    this.selectBranch.push({ color: 'badge-secondary', branch: '全部' });
                    this.source.forEach(item => {
                        //權限選擇初始化
                        this.$set(item, 'adminChecked', item.jobRank === 0);
                        this.$set(item, 'manageChecked', item.jobRank === 2);
                        //如果開啟admin權限 , 主管權限自動跟著開啟
                        if (item.adminChecked) {
                            item.manageChecked = item.adminChecked;
                        }
                        //branches存入所有單位
                        this.branches.push({ branchId: item.branchId, branch: item.branch });
                    })
                    //過濾branches重複的單位
                    this.branches = this.branches.filter((item, index, self) => {
                        //findIndex找陣列物件裡的相同的id回傳物件的index
                        const firstIndex = self.findIndex(f => f.branchId === item.branchId);
                        //目前index與findIndex相同  回傳true
                        return index === firstIndex;
                    })
                    //排列部門順序(id小至大)
                    this.branches.sort((a, b) => a.branchId - b.branchId);
                },
                //格式化日期
                formatDate(date) {
                    moment.locale('zh-tw');
                    return moment(date).format('l');
                },
                //處理admin權限checked
                handleAdmin(data) {
                    //開啟admin等於開啟主管
                    if (data.adminChecked) {
                        data.jobRank = 0;
                        data.manageChecked = true;
                    }
                    else
                        data.jobRank = 2;
                    this.editStatus(data);
                },
                //處理主管權限checked
                handleManage(data) {
                    if (data.manageChecked)
                        data.jobRank = 2;
                    else {
                        //關閉主管等於關閉admin
                        data.adminChecked = false;
                        data.jobRank = 1;
                    }
                    this.editStatus(data);
                },
                //處理帳號是否開通
                handleAllow(data) {
                    data.allow = !data.allow;
                    this.editStatus(data);
                },
                //儲存被編輯的員工資料
                editStatus(data) {
                    //判斷被修改過的員工資料再加入editEmps
                    if (this.editEmps.length > 0) {
                        let index = this.editEmps.findIndex(emp => emp.eId === data.eId);
                        if (index > -1) {
                            //如果editEmps已存在被修改的員工資料就先刪除
                            this.editEmps.splice(index, 1);
                        }
                    }
                    //editEmps加入被修改的員工資料
                    this.editEmps.push(data);
                },
                //處理Save的動作
                handleSave() {
                    let data = this.editEmps;
                    let count = data.length;
                    fetch('http://localhost:51010/api/apiAccount?' +
                        'rank=' + '@SessionEmp.CurrentEmp.JobRank' + '&' +
                        'branch=' + '@SessionEmp.CurrentEmp.Branch',
                        {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    }).then(res => {
                        if (res.ok) {
                            return res.json();
                        }else {
                            throw new Error(`發生${res.status} , ${res.statusText}`);
                        }
                    }).then(result => {
                        let self = this;
                        let data = JSON.parse(result);
                        sAlert(`${count}筆資料修改成功!`);
                        $(Swal.getConfirmButton()).click(function () {
                            self.source = data;
                            self.editEmps = [];
                            self.selectBranchId = [0];
                            self.selectBranch = [];
                            self.initial();
                        })
                    }).catch(error => {
                        eAlert(error);
                    })
                },
            },
            watch: {
                //監控選擇單位
                selectBranchId(newValue, oldValue) {
                    //是否檢視全部單位
                    let isAll = newValue.indexOf(0);
                    if (!isAll) {
                        this.selectBranch = [{ color: 'badge-secondary', branch: '全部' }];
                        return;
                    }
                    //重新渲染所選取的Branch名單
                    this.selectBranch = [];
                    let obj = { color: '', branch: '' };
                    let selectBranches = this.branches.filter(item => {
                        return newValue.some(id => id === item.branchId);
                    })
                    //設定單位顏色
                    let colorCount = 0;
                    selectBranches.forEach((item, index) => {
                        if (colorCount == color.length)
                            colorCount = 0;
                        obj = { color: `badge-${this.color[index]}`, branch: item.branch };
                        this.selectBranch.push(obj);
                        colorCount++;
                    })
                }
            }
        })
    </script>
}

@section Style{
    @*<link href="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/css/bootstrap4-toggle.min.css" rel="stylesheet">*@
    <link href="~/Content/Multi-Column-Select/Multi-Column-Select.css" rel="stylesheet" />
    <style>
        li[class="list-group-item"] {
            padding: 0px;
            margin: 0px;
        }

            li[class="list-group-item"] label {
                margin: 0;
                border-radius: initial;
                display: flex;
                justify-content: space-around;
                align-items: center;
            }

        .headImg {
            width: 100px;
            height: 100px;
            border-radius: 100%;
            box-shadow: 3px 3px 10px black;
            cursor: pointer;
            transition: 0.5s;
        }

        .userBorderColor {
            border: 3px solid #4de46c;
        }

        .managerBorderColor {
            border: 3px solid #3841f5;
        }

        .adminBorderColor {
            border: 3px solid red;
        }

        .closeBorderColor {
            border: 3px solid #808080;
        }

        .block {
            transition: 0.5s;
            cursor: pointer;
            box-sizing: border-box;
            display: flex;
            align-items: center;
            margin: 10px 0px;
            padding: 0px;
            border-radius: 5px;
        }

            .block:hover {
                background-color: #ddedf2;
            }

                .block:hover img {
                    box-shadow: 2px 2px 2px black;
                }

        .name {
            font-size: 1.1em;
        }

        .block:hover .name {
            background-color: #ddedf2;
            color: black;
        }

        .item {
            padding: 0px 0px;
            margin-left: -10px;
            box-shadow: 5px 5px 5px rgba(0,0,0,0.5);
        }

            .item h4 {
                height: 2em;
                margin: 0px;
            }

            .item p {
                margin: 0px;
            }

        .block > [class="col-10"] {
            padding: 0px;
        }


        .viewSelect {
            align-items: center;
        }

            .viewSelect select {
                border: 2px solid black;
            }

        .selectItem {
            display: flex;
            align-items: center;
        }

            .selectItem p {
                font-size: 1.5rem;
                font-weight: bold;
                margin: 0;
                margin-right: 10px;
            }

            .selectItem span {
                border: 2px solid #ddedf2;
                box-sizing: border-box;
                display: inline-block;
                text-align: center;
                font-weight: bold;
            }

        .selectA span {
            border-radius: 100%;
            background-color: #5ce066;
            color: #0a0a09;
            width: 100px;
            /*height: 60px;*/
            line-height: 4rem;
            font-size: 1.6rem;
        }

        .selectB span {
            border-radius: 100%;
            background-color: darkblue;
            color: aliceblue;
            width: 100px;
            /*height: 60px;*/
            line-height: 4rem;
            font-size: 1.6rem;
        }

        .saveBtn {
            position: absolute;
            bottom: 0;
            right: 0;
        }
    </style>
}

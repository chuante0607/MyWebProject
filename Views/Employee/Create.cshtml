@model UCOMProject.Models.EmployeeViewModel

@{
    ViewBag.Title = "建立員工檔案";
}


@using (Html.BeginForm("Create", "employee", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>建立員工檔案</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-row">
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.EId, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.EId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EId, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>

        </div>


        <div class="form-row">
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>

            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.EnglishName, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.EnglishName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EnglishName, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-row">
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                @Html.LabelFor(model => model.Branch, htmlAttributes: new { @class = "control-label" })
                @Html.EnumDropDownListFor(model => model.Branch, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Branch, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.JobTitle, htmlAttributes: new { @class = "control-label" })
                @Html.EnumDropDownListFor(model => model.JobTitle, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.JobTitle, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @*@Html.LabelFor(model => model.Sex, new { @class = "control-label" })*@
                @Html.CheckBoxFor(model => model.Sex , new { @class= "form-control" })
                @Html.ValidationMessageFor(model => model.Sex, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Shift, htmlAttributes: new { @class = "control-label" })
                @Html.EnumDropDownListFor(model => model.Shift, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Shift, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control", type = "date" } })
                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-row">
            <div class="form-group">
                @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label" })
                @Html.TextBoxFor(model => model.Image, new { @class = "form-control-file", type = "file" })
                @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
            </div>
        </div>






        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@*<input type="checkbox" id="toggle-two">*@
@section Script{
    <script src="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/js/bootstrap4-toggle.min.js"></script>
    <script>
        $(function () {
            $('#Sex').bootstrapToggle({
                on: '男',
                onstyle:'primary',
                off: '女',
                offstyle: 'danger',
            }).change((e) => {
                console.log(e.target.checked);
            });
        })
    </script>
}

@section Style{
    <link href="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/css/bootstrap4-toggle.min.css" rel="stylesheet">
    <style>
        .toggle.ios, .toggle-on.ios, .toggle-off.ios {
            border-radius: 20rem;
        }

            .toggle.ios .toggle-handle {
                border-radius: 20rem;
            }
    </style>

}

@using UCOMProject.Methods;
@using UCOMProject.Models;

@{
    ViewBag.Title = "Index";
    int rank = SessionEmp.CurrentEmp.JobRank;
}



<!-- Summary -->
<div id="app" v-cloak>
    <!--toast-->
    <div class="toast" role="alert" aria-live="assertive" aria-atomic="true" v-show="toastShow">
        <div class="toast-header">
            <img src="~/img/email.png" class="rounded mr-2" alt="..." style="width:50px;height:50px">
            <strong class="mr-auto">訊息狀態</strong>
            <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="toast-body">
            Hello! @SessionEmp.CurrentEmp.Name ，{{overTime.OverTimeDate}} 主管發佈加班需求！
            <br />
            請進行確認...
            <br />
            <br />
            <div class="overTime_toast">
                <div class="btn btn-sm btn-outline-info" v-on:click="handleOverTime(true)">配合</div>
                <div class="btn btn-sm btn-outline-danger" v-on:click="handleOverTime(false)">拒絕</div>
            </div>
        </div>
    </div>


    <div v-show="showCalendars">
        <div class="row">
            <div class="col title">
                <img src="~/img/employees1.png" class="titleImg" />
                &nbsp; &nbsp;
                <span class="h4 mb-0">
                    今日休假人員清單
                </span>
            </div>
        </div>
        <br />
        <div class="row" v-if="showAlarm">
            <div class="col">
                <span class="badge badge-primary" style="font-size:1rem">
                    計畫{{attendance.total}}人
                    實到{{attendance.real}}人
                </span>
                <span class="badge badge-danger alarm" style="font-size:1rem">
                    不足{{attendance.alarm * -1}}人
                </span>
            </div>
        </div>

        <div id="calendar"></div>
    </div>
    <div class="mt-5"></div>

    <div class="row">
        <div class="col title">
            <img src="~/img/holiday.png" class="titleImg" />
            &nbsp; &nbsp;
            <span class="h4 mb-0">
                個人假別統計
                <span class="badge badge-secondary">年資 @Session["seniority"]</span>
            </span>
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="col-2 text-center mt-3" v-for="(h , index) in holidays" :key="h.hId">
            <span :class="'badge badge-' + color[index]" style="font-size:18px">{{h.title}}</span>
            <canvas class="holidayChart"></canvas>
        </div>
    </div>
    <div class="mt-5"></div>
    <div class="row">
        <div class="col title">
            <img src="~/img/log.png" class="titleImg" />
            &nbsp; &nbsp;
            <span class="h4 mb-0">
                本年度休假歷史紀錄
            </span>
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="col">
            <canvas id="leaveChart" height="80"></canvas>
        </div>
    </div>




</div>

@section Script{
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="~/Content/fullcalendar-6.1.4/dist/index.global.js"></script>


    <script type="text/javascript">


        const vm = new Vue({
            el: '#app',
            data: {
                color,
                source: {},
                canUse: true,
                watchYear: '',
                leaveCount: [],
                totalCount: 4,
                calendars: [],
                holidays: [],
                leaveInfos: {},
                rank: 0,
                showCalendars: false,
                showAlarm: false,
                planAttendance: {},
                attendance: {},
                toastShow: true,
                overTime: {},
            },
            mounted() {

                this.rank = @rank;
                this.source = @Html.Raw(ViewBag.Source);
                this.source.holidays.forEach((item, index) => {
                    this.$set(item, 'checked', false);
                    this.$set(item, 'color', this.color[index]);;
                });
                this.holidays = this.source.holidays;
                this.leaveInfos = this.source.chartInfos[0];

                let currentEmp = '@SessionEmp.CurrentEmp.EId';
                const myHeaders = new Headers();
                myHeaders.append('Authorization', `${currentEmp}`);
                fetch('http://localhost:51010/api/apiSchedule', {
                    headers: myHeaders,
                }).then(response => {
                    return response.json();
                }).then(result => {
                    result.calendars.forEach(c => {
                        c.title = `${c.title}(${c.remark})`;
                        this.calendars.push(c);
                    })
                    //人力需求
                    let attendance = result.attendance;
                    let today = new Date();
                    if (attendance) {
                        this.planAttendance = attendance.find(d => {
                            let sourceDate = new Date(d.date);
                            return sourceDate.toLocaleDateString() === today.toLocaleDateString();
                        })
                        if (this.planAttendance) {
                            this.showAlarm = true;
                        } else {
                            this.showAlarm = false;
                        }
                    }
                    if (this.rank != 1) {
                        document.addEventListener('DOMContentLoaded', this.initialCalendar());
                        this.showCalendars = true;
                    }
                    this.initialHoliadyChart();
                    this.initialLeaveChart();
                })
                $('.toast').toast({
                    autohide:false,
                })
                $('.toast').toast('show');
                let overTime = @Html.Raw(ViewBag.overTime);
                if (overTime) {
                    this.overTime = overTime[0];
                    let date = new Date(this.overTime.OverTimeDate).toLocaleDateString();
                    this.overTime.OverTimeDate = date;
                    this.toastShow = true;
                }
                else {
                    this.toastShow = false;
                }


            },
            watch: {
                showAlarm(newValue, oldValue) {
                    if (newValue) {
                        let total = this.planAttendance.shouldNum;
                        let real = this.planAttendance.shouldNum - this.planAttendance.leaveNum;
                        let alarm = this.planAttendance.realNum;
                        this.attendance =  { total, real, alarm };
                    }
                },
            },
            methods: {
                //holidayChart
                initialHoliadyChart() {
                    let self = this;
                    const ctx = document.querySelectorAll('.holidayChart');
                    ctx.forEach((obj, index) => {
                        const image = new Image();
                        image.src = '/img/contract.png';
                        let plugin = {
                            id: 'customCanvasBackgroundImage',
                            beforeDraw: (chart) => {
                                if (image.complete) {
                                    const ctx = chart.ctx;
                                    const { top, left, width, height } = chart.chartArea;
                                    const x = left + width / 2 - image.width / 2;
                                    const y = top + height / 2 - image.height / 2;
                                    ctx.drawImage(image, x, y);
                                } else {
                                    image.onload = () => chart.draw();
                                }
                            }
                        };

                        let info = self.holidays[index];
                        let title = `TOTAL: ${info.totalDays}天`;
                        let chartData = [];
                        chartData.push(info.canUseDays);
                        chartData.push(info.usedDays);
                        const chart = new Chart(obj, {
                            type: 'doughnut',
                            data: {
                                labels: ['可用', '已用'],
                                datasets: [{
                                    label: '天數',
                                    data: chartData,
                                    borderWidth: 2,
                                }],
                            },
                            options: {
                                //scales: {
                                //    y: {
                                //        beginAtZero: true
                                //    }
                                //},
                                responsive: true,
                                plugins: {
                                    title: {
                                        display: true,
                                        text: title,
                                        fullSize: true,
                                        font: { size: 18 },
                                    },
                                    legend: {
                                        labels: {
                                            font: {
                                                size: 12
                                            }
                                        }
                                    }
                                }
                            },
                            //plugins: [plugin],
                        });
                    })

                },
                //leaveChart
                initialLeaveChart() {
                    let self = this;
                    const ctx = document.getElementById('leaveChart');
                    new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月','十二月'],
                            datasets: [{
                                label: '使用天數',
                                data: self.leaveInfos.days,
                                borderWidth: 2,
                                backgroundColor: ['#ff6699'],
                            }]
                        },
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        },
                        plugins: {
                            title: {
                                display: true,
                                font: { size: 18 },
                            },
                            legend: {
                                labels: {
                                    font: {
                                        size: 12
                                    }
                                }
                            }
                        }
                    });
                },
                //calendar
                initialCalendar() {
                    let self = this;
                    var calendarEl = document.getElementById('calendar');
                    var calendar = new FullCalendar.Calendar(calendarEl, {
                        eventSources: [
                            {
                                events: self.calendars,//初始化events
                                defaultAllDay: true,
                            }
                        ],
                        locale: 'zh-cn',
                        initialView: 'listDay',
                        dayMaxEvents: true,
                        dayHeaders: false,
                        headerToolbar: {
                            start: '',
                            center: '',
                            end: ''
                        },
                        listDayFormat: {
                            year: 'numeric',
                            month: 'numeric',
                            day: 'numeric',
                        },
                        contentHeight: 300,
                        buttonText: {
                            today: '今天',
                            month: '月',
                            week: '周',
                            day: '天',
                            list: '清單'
                        },
                    });
                    calendar.render();
                },
                handleOverTime(check) {
                    let self = this;
                    if (check) {
                        this.overTime.UserCheck = check;
                        let url = 'http://localhost:51010/api/apiSchedule'
                        fetch(url, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(this.overTime)
                        }).then(response => {
                            if (response.ok)
                                return response.json();
                        }).then(result => {
                            if (!result.success)
                                alert(result.msg);
                        })
                        alert('感謝您的配合!');
                        self.toastShow = false;
                    } else {
                        self.toastShow = false;
                        return;
                    }
                },
            },
    });
    </script>
}

@section Style{
    <style>
        .title {
            display: flex;
            align-items: flex-end;
            justify-content: flex-start;
        }

        .holidayCard {
            display: flex;
            flex-direction: row;
            flex-wrap: nowrap;
            justify-content: center;
        }

        #calendarList {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .titleImg {
            width: 30px;
        }

        .toast {
            margin: auto;
        }

        .alarm {
            animation-name: slidein;
            animation-duration: 3s;
            animation-iteration-count: infinite;
        }

        .overTime_toast {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
    </style>
}
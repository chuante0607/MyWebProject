@using UCOMProject.Models
@using UCOMProject.Methods
@{
    ViewBag.Title = "出勤總覽";
    Employee emp = SessionEmp.CurrentEmp;
}

<h4 class="text-center">出勤總覽</h4>
<div id="app" v-cloak>
    <div class="mt-5">
        <div class="block">
            <div class="shift_block shiftA" data-toggle="tooltip" data-placement="top" id="titleA"></div>
            <span>A班</span>&nbsp;&nbsp;&nbsp;
            <div class="shift_block" data-toggle="tooltip" data-placement="top" id="titleB"></div>
            <span>B班</span>&nbsp;&nbsp;&nbsp;
            <div class="shift_block shiftW" data-toggle="tooltip" data-placement="top" id="titleW"></div>
            <span>常日班</span>&nbsp;&nbsp;&nbsp;
            <div class="all" data-toggle="tooltip" data-placement="top" id="titleAll"></div>
            <span class="allContent">{{employees.length}}</span>
        </div>
        <div id="calendar" class=""></div>
    </div>
</div>


@section Script{
    <script src="~/Content/fullcalendar-6.1.4/dist/index.global.js"></script>
    <script>







        const vm = new Vue({
            el: '#app',
            data: {
                employees: [],
                calendars: [],
                plans: [],
                shifts: [],
                leaveCount: [],
                empsA:[],
                empsB:[],
                empsW:[],
            },
            mounted() {
                fetch('http://localhost:51010/api/apiSchedule').then(response => {
                    if (response.ok) {
                        return response.json();
                    }
                }).then(result => {
                    this.calendars = result.calendars;
                    this.employees = result.employees;
                    this.shifts = result.shifts;
                    this.plans = result.plans;
                    let leaves = result.leaveCount;
                    for (let key in leaves) {
                        let newKey = new Date(key);
                        let leaveObj = { date: newKey, count: leaves[key] };
                        this.leaveCount.push(leaveObj);
                    }
                    document.addEventListener('DOMContentLoaded', this.initialCalendar())
                })
            },
            watch: {
                //employees為非同步取得 使用watch可監測employees取得值的變化,再渲染tooltip
                employees: {
                    handler(newValue, oldValue) {
                        this.empsA = newValue.filter(emp => emp.Shift === "A班");
                        this.empsB = newValue.filter(emp => emp.Shift === "B班");
                        this.empsW = newValue.filter(emp => emp.Shift === "常日班");
                        this.initialTooltip();
                    }
                }
            },
            methods: {
                //初始化calendar
                initialCalendar() {
                    let self = this;
                    var calendarEl = document.getElementById('calendar');
                    var calendar = new FullCalendar.Calendar(calendarEl, {
                        eventSources: [
                            {
                                events: this.calendars,//初始化events
                                defaultAllDay: true,
                                className: 'text-center badge badge-primary event_backImg',
                            }
                        ],
                        locale: 'zh-cn',
                        initialView: 'dayGridMonth',
                        height: 1000,
                        headerToolbar: {
                            left: 'prev,next,today',
                            center: 'title',
                            right: 'dayGridMonth,timeGridWeek,timeGridDay'
                        },
                        titleFormat: { year: 'numeric', month: 'short' },
                        buttonText: {
                            today: '今天',
                            month: '月',
                            week: '周',
                            day: '天',
                            list: '清單'
                        },
                        aspectRatio: 2,
                        dayMaxEvents: true,
                        eventClick: self.handleEventClick,
                        eventDidMount: self.handleEventDidMount,
                        dayCellClassNames: self.handleDayCellClassNames,
                        dayCellContent: self.handleDayCellContent,
                    });
                    calendar.render();
                },
                //初始化班別資訊tooltip
                initialTooltip() {
                    $('#titleA').tooltip({
                        title: 'A班人力：' + this.empsA.length,
                        html: true,
                    })
                    $('#titleB').tooltip({
                        title: 'B班人力：' + this.empsB.length,
                        html: true,
                    })
                    $('#titleW').tooltip({
                        title: '常日班人力：' + this.empsW.length,
                        html: true,
                    })
                    $('#titleAll').tooltip({
                        title: '總人力',
                        html: true,
                    })
                },
                //event點擊跳到員工請假detail
                handleEventClick(info) {
                    location.href = '@Url.Action("Record", "Holiday")?id=' + info.event.id;
                },
                handleEventDidMount(arg) {
                    arg.el.setAttribute('data-toggle', 'eventTooltip');
                    arg.el.setAttribute('data-placement', 'top');
                    let id = arg.event.id;
                    let event = this.calendars.find(e => e.id == id);
                    setEventToolTip(event.remark);
                },
                //cell的AB班顏色 class name
                handleDayCellClassNames(arg) {
                    let date = arg.date;
                    let shift = this.shifts[date.getMonth()].find(s => {
                        let check = new Date(s.CheckDate).toLocaleDateString();
                        return check === date.toLocaleDateString();
                    })
                    if (shift && shift.IsWork) {
                        return 'shiftA';
                    } else {
                        return '';
                    }
                },
                handleDayCellContent(arg) {
                    let date = arg.date;
                    //計算每天的需求人力
                    let actual = this.plans.find(p => {
                        let checkDate = new Date(p.StartDate);
                        return date.toLocaleDateString() === checkDate.toLocaleDateString();
                    })
                    let actualCount = '';
                    if (actual) {
                        actualCount = actual.PlanTitle;
                    }

                    //計算請假人數
                    let leave = this.leaveCount.find(l => {
                        return l.date.toLocaleDateString() === date.toLocaleDateString();
                    })
                    let leaveCount = '';
                    if (leave) {
                        leaveCount = leave.count;
                    }

                    //計算每班的實際人數
                    //this.plans.forEach(p => {
                    //    let count = this.leaveCount[p.StartDate];

                    //    if (count) {
                    //        let shiftACount = this.empsA.length;
                    //        let shiftBCount = this.empsB.length;
                    //        let date = p.StartDate;
                    //        let actualCount = 10;
                    //        let requiredCount = p.PlanTitle;
                    //        let leaveCount = count;
                    //        let subCount = requiredCount - actualCount - leaveCount;
                    //        let alarm = '';
                    //        if (subCount < 0) {
                    //            alarm = '人不夠';
                    //        } else {
                    //            alarm = '';
                    //        }
                    //    }
                    //})
                    let htmlStr = `<div class="row">
                                      <div class="col badge badge-danger">${actualCount}-${leaveCount}</div>
                                      <div class="col">
                                         <i>${arg.dayNumberText}</i>
                                      </div>
                                   </div>`
                    return { html: htmlStr };
                },
            }
        })


        function setEventToolTip(title) {
            $('[data-toggle="eventTooltip"]').tooltip({
                title: title,
                html: true,
            });
        }

        //document.addEventListener('DOMContentLoaded', function () {
        //    var calendarEl = document.getElementById('calendar');
        //    var calendar = new FullCalendar.Calendar(calendarEl, {
        //        eventSources: [
        //            {
        //                events: result.calendars,//初始化events
        //                defaultAllDay: true,
        //                className: 'text-center badge badge-primary event_backImg',
        //            }
        //        ],
        //        locale: 'zh-cn',
        //        initialView: 'dayGridMonth',
        //        height: 1000,
        //        headerToolbar: {
        //            left: 'prev,next,today',
        //            center: 'title',
        //            right: 'dayGridMonth,timeGridWeek,timeGridDay'
        //        },
        //        titleFormat: { year: 'numeric', month: 'short' },
        //        buttonText: {
        //            today: '今天',
        //            month: '月',
        //            week: '周',
        //            day: '天',
        //            list: '清單'
        //        },
        //        aspectRatio: 2,
        //        dayMaxEvents: true,
        //        //eventDidMount: function (arg) {
        //        //    arg.el.setAttribute('data-toggle', 'eventTooltip');
        //        //    arg.el.setAttribute('data-placement', 'top');
        //        //    let id = arg.event.id;
        //        //    let event = myData.calendars.find(e => e.id == id);
        //        //    setEventToolTip(event.remark);

        //        //},
        //        //eventClick: vm.handleEventClick,
        //        //dayCellClassNames: vm.handleDayCellClassNames,
        //    });
        //    calendar.render();
        //});



    </script>

}


@section Style{
    <link rel='stylesheet' href='https://cdn-uicons.flaticon.com/uicons-solid-rounded/css/uicons-solid-rounded.css'>
    <link rel='stylesheet' href='https://cdn-uicons.flaticon.com/uicons-regular-rounded/css/uicons-regular-rounded.css'>
    <style>
        .calendarFlex {
            display: flex;
            min-width: 100px;
            justify-content: space-between;
        }

        .calendarDayTxt {
            font-size: 1rem;
            font-weight: 800;
            box-shadow: 2px 2px 5px rgba(0,0,0,0.2);
            padding: 5px;
            border-radius: 50%;
            color: black;
        }

        .shiftA {
            background-color: #d6e7f3;
        }

        .event_backImg {
            background-size: contain;
            background-repeat: no-repeat;
        }

        .event_shiftA {
            background-image: url(/images/a.png);
        }

        .event_shiftB {
            background-image: url(/images/b.png);
        }

        .event_shiftW {
            background-image: url(/images/w.png);
        }

        .cellBack {
            background-color: yellow;
        }
    </style>
}
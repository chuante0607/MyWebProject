
@{
    ViewBag.Title = "人力計畫";
}
<div id="app" style="padding:0px 150px" v-cloak>
    <div class="row">
        <div id='external-events' class="col-1" style="margin-top:197px">
            <div>
                <input type="text"
                       v-model.number="planTitle"
                       v-on:keydown.enter="addPlan"
                       placeholder="輸入需求人數"
                       class="form-control" />
                <span v-show="errorMsg" class="badge badge-danger">{{errorMsg}}</span>
            </div>
            <div id='external-events-list' class="mt-3">
                <div class='fc-event fc-h-event fc-daygrid-event fc-daygrid-block-event mb-3'
                     style="position:relative;"
                     v-for="p in planList"
                     :key="p.id"
                     :data-id="p.id">
                    <div class='fc-event-main'>
                        {{p.planTitle}}
                    </div>
                    <div class="btn btn-small cross" v-on:click="delPlan(p.id)"><i class="fi fi-bs-cross-small"></i></div>
                </div>
            </div>
        </div>
        <div class="col">
            <h4 class="text-center">人力計畫</h4>
            <div class="block mt-5">
                <div class="shift_block shiftA" data-toggle="tooltip" data-placement="top" id="titleA"></div>
                <span>A班</span>&nbsp;&nbsp;&nbsp;
                <div class="shift_block" data-toggle="tooltip" data-placement="top" id="titleB"></div>
                <span>B班</span>&nbsp;&nbsp;&nbsp;
                <div class="shift_block shiftW" data-toggle="tooltip" data-placement="top" id="titleW"></div>
                <span>常日班</span>&nbsp;&nbsp;&nbsp;
                <div class="all" data-toggle="tooltip" data-placement="top" id="titleAll"></div>
                <span class="allContent">{{employees.length}}</span>
            </div>
            <div id="calendar"></div>

        </div>
    </div>


</div>


@section Script{
    <script src="~/Content/fullcalendar-6.1.4/dist/index.global.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            let url = 'http://localhost:51010/api/apiPlan';
            fetch(url).then(response => {
                if (response.ok)
                    return response.json()
            }).then(result => {
                let myData = JSON.parse(result);
                //eventsData初始化event需要的資料型態
                let eventsData = [];
                //定義event物件原型
                function Event(id, title, start, end) {
                    this.id = id;
                    this.title = title;
                    this.start = start;
                    this.end = end;
                }
                //data資料來源
                myData.plans.forEach(p => {
                    //vm playload儲存事件的data 之後需要post後端更新資料庫
                    vm.payload.push(p);
                    //初始化calendar event需要的資料型態{id , title , start , end}
                    eventsData.push(new Event(p.id, p.planTitle, p.startDate, p.endDate));
                })
                //外部拖曳物件
                var containerEl = document.getElementById('external-events-list');
                new FullCalendar.Draggable(containerEl, {
                    itemSelector: '.fc-event',
                    eventData: function (eventEl) {
                        return {
                            title: eventEl.innerText,
                            id: eventEl.getAttribute('data-id'),
                            className: 'text-center badge badge-primary',
                            overlap: false,//阻止event重疊
                        }
                    },
                });

                //calendar物件
                var calendarEl = document.getElementById('calendar');
                var calendar = new FullCalendar.Calendar(calendarEl, {
                    eventSources: [
                        {
                            events: eventsData,//初始化events
                            defaultAllDay: true,
                            className: 'text-center badge badge-primary',
                            overlap: false,//阻止event重疊
                        }
                    ],
                    locale: 'zh-cn',
                    initialView: 'dayGridMonth',
                    headerToolbar: {
                        left: 'prev,next,today',
                        center: 'title',
                        right: 'dayGridMonth'
                    },
                    titleFormat: { year: 'numeric', month: 'short' },
                    buttonText: {
                        today: '今天',
                        month: '月',
                        week: '周',
                        day: '天',
                        list: '清單'
                    },
                    eventMaxStack: 1,
                    editable: true,
                    droppable: true,
                    height: 800,
                    timeZone: 'UTC',
                    drop: function (info) {
                        vm.handleDrop(info);
                    },
                    eventDrop: function (info) {
                        vm.handleEventDrop(info);
                    },
                    eventClick: function (info) {
                        vm.handleEventClick(info);
                    },
                    eventResize: function (info) {
                        vm.handleEventResize(info);
                    },
                    dayCellClassNames: function (arg) {
                        let date = new Date(arg.date);
                        let shift = myData.shifts[date.getMonth()].find(s => {
                            let check = new Date(s.checkDate).toLocaleDateString();
                            return check === date.toLocaleDateString();
                        })
                        if (shift && shift.isWork) {
                            return 'shiftA';
                        }
                        else
                            return '';
                    },
                });
                calendar.render();
            }).catch(error => {
                console.log(error);
            })


        });
        //產生Guid
        function guid() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0,
                    v = c == 'x' ? r : (r & 0x3 | 0x8)
                return v.toString(16)
            })
        }

        //定義一個Plan物件儲存event資訊到資料庫
        function Plan(title) {
            this.id = guid();
            this.planTitle = title;
            this.startDate = null;
            this.endDate = null;
        }

        //開始日期+1天為結束日期(calendar event用)
        function setEnd(start) {
            // 创建开始日期
            let startdate = new Date(start);
            // 将开始日期加上一天
            let endDate = new Date(startdate.getTime() + (24 * 60 * 60 * 1000));
            return endDate;
        }


        const vm = new Vue({
            el: '#app',
            data: {
                employees: [],
                planTitle: '',//v-model
                planList: [],//planList
                payload: [],//post data
                errorMsg: '',
            },
            mounted() {
                this.initialTooltip();
            },
            computed: {
                empsA() {
                    return this.employees.filter(emp => emp.shift === "A班");
                },
                empsB() {
                    return this.employees.filter(emp => emp.shift === 'B班');
                },
                empsW() {
                    return this.employees.filter(emp => emp.shift === '常日班');
                },
            },
            methods: {
                //初始化班別資訊tooltip
                initialTooltip() {
                    this.employees = @Html.Raw(ViewBag.Source);
                    let empInfo = '';
                    this.empsA.forEach(emp => {
                        empInfo += emp.name + ',';
                    })
                    let templateA = `<div>A班人力：${this.empsA.length}<br>${empInfo}</div>`;
                    $('#titleA').tooltip({
                        title: templateA,
                        html: true,
                    })
                    empInfo = '';
                    this.empsB.forEach(emp => {
                        empInfo += emp.name + ',';
                    })
                    let templateB = `B班人力：${this.empsB.length}<br>${empInfo}</div>`;
                    $('#titleB').tooltip({
                        title: templateB,
                        html: true,
                    })
                    empInfo = '';
                    this.empsW.forEach(emp => {
                        empInfo += emp.name + ',';
                    })
                    let templateW = `常日班人力：${this.empsW.length}<br>${empInfo}</div>`;
                    $('#titleW').tooltip({
                        title: templateW,
                        html: true,
                    })

                    $('#titleAll').tooltip({
                        title: '總人力',
                        html: true,
                    })
                },
                //新增外部拖曳的plan
                addPlan() {
                    if (this.planTitle && this.planTitle > 0) {
                        let title = this.planTitle;
                        //new Plan物件
                        let plan = new Plan(title);
                        //planList加入Plan物件
                        this.planList.unshift(plan);
                        this.planTitle = '';
                        this.errorMsg = '';
                    } else {
                        this.errorMsg = '請輸入有效數字';
                    }
                },
                //刪除plan list 的plan物件
                delPlan(id) {
                    this.planList = this.planList.filter(p => p.id != id)
                },
                //拖曳結束重新產生一樣的plan 但是id重新生成
                reviewPlan(plan) {
                    //找到原始plan索引
                    let index = this.planList.findIndex(p => p.id == plan.id);
                    //一樣的位置new Plan物件  id要重新生成
                    this.planList.splice(index, 1, new Plan(plan.planTitle));
                },
                //plan從list拖曳後放置時觸發
                handleDrop(info) {
                    let currentId = info.draggedEl.getAttribute('data-id');
                    //找出plan物件並設定開始與結束日期
                    let plan = this.planList.find(p => p.id == currentId);
                    plan.startDate = info.date;
                    plan.endDate = setEnd(info.date);
                    //儲存被拖曳到calendar的plan物件
                    this.payload.push(plan);
                    //準備重新生成planlist與被拖曳plan一樣的物件 但是id不一樣(plan為目前被拖曳的物件)
                    this.reviewPlan(plan);

                    //**發送請求
                    this.UpdateData();
                },
                //plan從calendar拖曳並放置時會觸發
                handleEventDrop(info) {
                    this.payload.forEach(plan => {
                        if (plan.id == info.event.id) {
                            plan.startDate = info.event.start;
                            //沒有變更長度直接拖曳  , end會有null的情形 所以要對null特別處理
                            plan.endDate = info.event.end ? info.event.end : setEnd(info.event.start);
                        }
                    })

                    //**發送請求
                    this.UpdateData();
                },
                //從calendar的plan被點擊後刪除
                handleEventClick(info) {
                    this.payload = this.payload.filter(plan => plan.id != info.event.id);
                    info.event.remove();

                    //**發送請求
                    this.DeleteData(info.event.id);
                },
                //event變更長度
                handleEventResize(info) {
                    this.payload.forEach(plan => {
                        if (plan.id == info.event.id) {
                            plan.startDate = info.event.start;
                            plan.endDate = info.event.end;
                        }
                    })

                    //**發送請求
                    this.UpdateData();
                },
                //post payload
                UpdateData() {
                    fetch('http://localhost:51010/api/apiPlan', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(this.payload)
                    }).then(res => {
                        return res.json();
                    }).then(result => {
                        if (!result.isPass)
                            console.log(result.msg);
                    }).catch(error => {
                        if (!error.isPass)
                            console.log(error.msg);
                    })
                },
                //delete payload
                DeleteData(id) {
                    fetch('http://localhost:51010/api/apiPlan?id=' + id, {
                        method: 'DELETE',
                    }).then(res => {
                        console.log(res);
                    }).catch(error => {
                        console.log(error);
                    })
                },
            },
        })

    </script>
}

@section Style{
    <link rel='stylesheet' href='https://cdn-uicons.flaticon.com/uicons-regular-rounded/css/uicons-regular-rounded.css'>
    <link rel='stylesheet' href='https://cdn-uicons.flaticon.com/uicons-bold-rounded/css/uicons-bold-rounded.css'>
    <link rel='stylesheet' href='https://cdn-uicons.flaticon.com/uicons-bold-straight/css/uicons-bold-straight.css'>
    <style>
        .cross {
            position: absolute;
            right: 0;
            top: 0;
            padding: 0;
            cursor: pointer;
            z-index: 100;
        }

        .event_shiftW {
            background-image: url(/images/w.png);
        }
        .shift_block {
            border: 1px solid black;
            width: 30px;
            height: 30px;
            display: inline-block;
            margin-right: 10px;
        }
        .shiftA {
            background-color: #d6e7f3;
        }

        .shiftW {
            border:1px dashed black;
            background-color: #ffe93a;
        }
    </style>
}